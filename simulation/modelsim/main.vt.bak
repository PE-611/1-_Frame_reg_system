// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/17/2021 13:50:04"
                                                                                
// Verilog Test Bench template for design : main
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module main_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg CLK;
reg UART_RX_IN;
// wires                                               
wire CS_SPI_RES;
wire OUT_SPI_CLK;
wire SDI;
wire UART_TX_OUT;
wire f;
wire [7:0]  led;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CS_SPI_RES(CS_SPI_RES),
	.OUT_SPI_CLK(OUT_SPI_CLK),
	.SDI(SDI),
	.UART_RX_IN(UART_RX_IN),
	.UART_TX_OUT(UART_TX_OUT),
	.f(f),
	.led(led)
);
initial begin                                                
CLK <= 1'b0;
UART_RX_IN <= 1'b1;                                                
                                       
$display("Running testbench");                       
end                                                    
always begin
#1 CLK <= !CLK;                                                                            
end      

always begin
#20000000 UART_RX_IN <= !UART_RX_IN;                                                                           
end                                                
endmodule

